# Generated from /home/crisvo/IdeaProjects/BCCtoArnoldC/grammar/BCC.g4 by ANTLR 4.8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\67")
        buf.write("\u015d\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3")
        buf.write("\7\3\b\3\b\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3")
        buf.write("\f\3\r\3\r\3\r\3\16\3\16\3\16\3\17\3\17\3\17\3\20\3\20")
        buf.write("\3\20\3\21\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\23\3\24")
        buf.write("\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\27\3\27\3\27\3\30")
        buf.write("\3\30\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\34\3\34")
        buf.write("\3\35\3\35\3\36\3\36\3\37\3\37\3 \6 \u00c3\n \r \16 \u00c4")
        buf.write("\3 \3 \3!\3!\7!\u00cb\n!\f!\16!\u00ce\13!\3!\3!\3\"\3")
        buf.write("\"\3\"\7\"\u00d5\n\"\f\"\16\"\u00d8\13\"\3#\6#\u00db\n")
        buf.write("#\r#\16#\u00dc\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3&")
        buf.write("\3&\3&\3&\3&\3\'\3\'\3\'\3(\3(\3(\3(\3(\3)\3)\3)\3)\3")
        buf.write(")\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u0108\n)\3*\3*\3")
        buf.write("*\3*\3*\3*\3*\3*\3*\3*\5*\u0114\n*\3+\3+\3+\3+\3+\3+\3")
        buf.write("+\3,\3,\3,\3,\3,\3-\3-\3-\3-\3-\3-\3-\3.\3.\3.\3.\3/\3")
        buf.write("/\3/\3/\3/\3\60\3\60\3\60\3\60\3\60\3\60\3\61\3\61\3\61")
        buf.write("\3\61\3\62\3\62\3\62\3\63\3\63\3\63\3\63\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u014c\n\64\3\65\3")
        buf.write("\65\3\65\3\65\3\65\3\65\3\65\5\65\u0155\n\65\3\66\3\66")
        buf.write("\7\66\u0159\n\66\f\66\16\66\u015c\13\66\2\2\67\3\3\5\4")
        buf.write("\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17")
        buf.write("\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63")
        buf.write("\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-")
        buf.write("Y.[/]\60_\61a\62c\63e\64g\65i\66k\67\3\2\7\5\2\13\f\17")
        buf.write("\17\"\"\4\2\f\f\17\17\4\2C\\c|\6\2\62;C\\aac|\3\2\62;")
        buf.write("\2\u0166\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2")
        buf.write("\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2")
        buf.write("\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2")
        buf.write("\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3")
        buf.write("\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2")
        buf.write("-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3")
        buf.write("\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2")
        buf.write("?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2")
        buf.write("\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2")
        buf.write("\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2")
        buf.write("\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3")
        buf.write("\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\3m\3\2\2\2\5v")
        buf.write("\3\2\2\2\7x\3\2\2\2\tz\3\2\2\2\13|\3\2\2\2\r~\3\2\2\2")
        buf.write("\17\u0082\3\2\2\2\21\u0086\3\2\2\2\23\u0088\3\2\2\2\25")
        buf.write("\u008a\3\2\2\2\27\u008c\3\2\2\2\31\u008f\3\2\2\2\33\u0092")
        buf.write("\3\2\2\2\35\u0095\3\2\2\2\37\u0098\3\2\2\2!\u009b\3\2")
        buf.write("\2\2#\u009e\3\2\2\2%\u00a1\3\2\2\2\'\u00a4\3\2\2\2)\u00a7")
        buf.write("\3\2\2\2+\u00a9\3\2\2\2-\u00ac\3\2\2\2/\u00af\3\2\2\2")
        buf.write("\61\u00b1\3\2\2\2\63\u00b4\3\2\2\2\65\u00b7\3\2\2\2\67")
        buf.write("\u00b9\3\2\2\29\u00bb\3\2\2\2;\u00bd\3\2\2\2=\u00bf\3")
        buf.write("\2\2\2?\u00c2\3\2\2\2A\u00c8\3\2\2\2C\u00d1\3\2\2\2E\u00da")
        buf.write("\3\2\2\2G\u00de\3\2\2\2I\u00e4\3\2\2\2K\u00ea\3\2\2\2")
        buf.write("M\u00ef\3\2\2\2O\u00f2\3\2\2\2Q\u0107\3\2\2\2S\u0113\3")
        buf.write("\2\2\2U\u0115\3\2\2\2W\u011c\3\2\2\2Y\u0121\3\2\2\2[\u0128")
        buf.write("\3\2\2\2]\u012c\3\2\2\2_\u0131\3\2\2\2a\u0137\3\2\2\2")
        buf.write("c\u013b\3\2\2\2e\u013e\3\2\2\2g\u014b\3\2\2\2i\u0154\3")
        buf.write("\2\2\2k\u0156\3\2\2\2mn\7h\2\2no\7w\2\2op\7p\2\2pq\7e")
        buf.write("\2\2qr\7v\2\2rs\7k\2\2st\7q\2\2tu\7p\2\2u\4\3\2\2\2vw")
        buf.write("\7<\2\2w\6\3\2\2\2xy\7*\2\2y\b\3\2\2\2z{\7.\2\2{\n\3\2")
        buf.write("\2\2|}\7+\2\2}\f\3\2\2\2~\177\7g\2\2\177\u0080\7p\2\2")
        buf.write("\u0080\u0081\7f\2\2\u0081\16\3\2\2\2\u0082\u0083\7x\2")
        buf.write("\2\u0083\u0084\7c\2\2\u0084\u0085\7t\2\2\u0085\20\3\2")
        buf.write("\2\2\u0086\u0087\7=\2\2\u0087\22\3\2\2\2\u0088\u0089\7")
        buf.write("}\2\2\u0089\24\3\2\2\2\u008a\u008b\7\177\2\2\u008b\26")
        buf.write("\3\2\2\2\u008c\u008d\7/\2\2\u008d\u008e\7/\2\2\u008e\30")
        buf.write("\3\2\2\2\u008f\u0090\7-\2\2\u0090\u0091\7-\2\2\u0091\32")
        buf.write("\3\2\2\2\u0092\u0093\7f\2\2\u0093\u0094\7q\2\2\u0094\34")
        buf.write("\3\2\2\2\u0095\u0096\7<\2\2\u0096\u0097\7?\2\2\u0097\36")
        buf.write("\3\2\2\2\u0098\u0099\7-\2\2\u0099\u009a\7?\2\2\u009a ")
        buf.write("\3\2\2\2\u009b\u009c\7/\2\2\u009c\u009d\7?\2\2\u009d\"")
        buf.write("\3\2\2\2\u009e\u009f\7,\2\2\u009f\u00a0\7?\2\2\u00a0$")
        buf.write("\3\2\2\2\u00a1\u00a2\7\61\2\2\u00a2\u00a3\7?\2\2\u00a3")
        buf.write("&\3\2\2\2\u00a4\u00a5\7\'\2\2\u00a5\u00a6\7?\2\2\u00a6")
        buf.write("(\3\2\2\2\u00a7\u00a8\7>\2\2\u00a8*\3\2\2\2\u00a9\u00aa")
        buf.write("\7?\2\2\u00aa\u00ab\7?\2\2\u00ab,\3\2\2\2\u00ac\u00ad")
        buf.write("\7>\2\2\u00ad\u00ae\7?\2\2\u00ae.\3\2\2\2\u00af\u00b0")
        buf.write("\7@\2\2\u00b0\60\3\2\2\2\u00b1\u00b2\7@\2\2\u00b2\u00b3")
        buf.write("\7?\2\2\u00b3\62\3\2\2\2\u00b4\u00b5\7#\2\2\u00b5\u00b6")
        buf.write("\7?\2\2\u00b6\64\3\2\2\2\u00b7\u00b8\7-\2\2\u00b8\66\3")
        buf.write("\2\2\2\u00b9\u00ba\7/\2\2\u00ba8\3\2\2\2\u00bb\u00bc\7")
        buf.write(",\2\2\u00bc:\3\2\2\2\u00bd\u00be\7\61\2\2\u00be<\3\2\2")
        buf.write("\2\u00bf\u00c0\7\'\2\2\u00c0>\3\2\2\2\u00c1\u00c3\t\2")
        buf.write("\2\2\u00c2\u00c1\3\2\2\2\u00c3\u00c4\3\2\2\2\u00c4\u00c2")
        buf.write("\3\2\2\2\u00c4\u00c5\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6")
        buf.write("\u00c7\b \2\2\u00c7@\3\2\2\2\u00c8\u00cc\7%\2\2\u00c9")
        buf.write("\u00cb\n\3\2\2\u00ca\u00c9\3\2\2\2\u00cb\u00ce\3\2\2\2")
        buf.write("\u00cc\u00ca\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd\u00cf\3")
        buf.write("\2\2\2\u00ce\u00cc\3\2\2\2\u00cf\u00d0\b!\2\2\u00d0B\3")
        buf.write("\2\2\2\u00d1\u00d2\7B\2\2\u00d2\u00d6\t\4\2\2\u00d3\u00d5")
        buf.write("\t\5\2\2\u00d4\u00d3\3\2\2\2\u00d5\u00d8\3\2\2\2\u00d6")
        buf.write("\u00d4\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7D\3\2\2\2\u00d8")
        buf.write("\u00d6\3\2\2\2\u00d9\u00db\t\6\2\2\u00da\u00d9\3\2\2\2")
        buf.write("\u00db\u00dc\3\2\2\2\u00dc\u00da\3\2\2\2\u00dc\u00dd\3")
        buf.write("\2\2\2\u00ddF\3\2\2\2\u00de\u00df\7r\2\2\u00df\u00e0\7")
        buf.write("t\2\2\u00e0\u00e1\7k\2\2\u00e1\u00e2\7p\2\2\u00e2\u00e3")
        buf.write("\7v\2\2\u00e3H\3\2\2\2\u00e4\u00e5\7k\2\2\u00e5\u00e6")
        buf.write("\7p\2\2\u00e6\u00e7\7r\2\2\u00e7\u00e8\7w\2\2\u00e8\u00e9")
        buf.write("\7v\2\2\u00e9J\3\2\2\2\u00ea\u00eb\7y\2\2\u00eb\u00ec")
        buf.write("\7j\2\2\u00ec\u00ed\7g\2\2\u00ed\u00ee\7p\2\2\u00eeL\3")
        buf.write("\2\2\2\u00ef\u00f0\7k\2\2\u00f0\u00f1\7h\2\2\u00f1N\3")
        buf.write("\2\2\2\u00f2\u00f3\7g\2\2\u00f3\u00f4\7n\2\2\u00f4\u00f5")
        buf.write("\7u\2\2\u00f5\u00f6\7g\2\2\u00f6P\3\2\2\2\u00f7\u00f8")
        buf.write("\7w\2\2\u00f8\u00f9\7p\2\2\u00f9\u00fa\7n\2\2\u00fa\u00fb")
        buf.write("\7g\2\2\u00fb\u00fc\7u\2\2\u00fc\u0108\7u\2\2\u00fd\u00fe")
        buf.write("\7y\2\2\u00fe\u00ff\7j\2\2\u00ff\u0100\7k\2\2\u0100\u0101")
        buf.write("\7n\2\2\u0101\u0108\7g\2\2\u0102\u0103\7w\2\2\u0103\u0104")
        buf.write("\7p\2\2\u0104\u0105\7v\2\2\u0105\u0106\7k\2\2\u0106\u0108")
        buf.write("\7n\2\2\u0107\u00f7\3\2\2\2\u0107\u00fd\3\2\2\2\u0107")
        buf.write("\u0102\3\2\2\2\u0108R\3\2\2\2\u0109\u010a\7y\2\2\u010a")
        buf.write("\u010b\7j\2\2\u010b\u010c\7k\2\2\u010c\u010d\7n\2\2\u010d")
        buf.write("\u0114\7g\2\2\u010e\u010f\7w\2\2\u010f\u0110\7p\2\2\u0110")
        buf.write("\u0111\7v\2\2\u0111\u0112\7k\2\2\u0112\u0114\7n\2\2\u0113")
        buf.write("\u0109\3\2\2\2\u0113\u010e\3\2\2\2\u0114T\3\2\2\2\u0115")
        buf.write("\u0116\7t\2\2\u0116\u0117\7g\2\2\u0117\u0118\7v\2\2\u0118")
        buf.write("\u0119\7w\2\2\u0119\u011a\7t\2\2\u011a\u011b\7p\2\2\u011b")
        buf.write("V\3\2\2\2\u011c\u011d\7n\2\2\u011d\u011e\7q\2\2\u011e")
        buf.write("\u011f\7q\2\2\u011f\u0120\7r\2\2\u0120X\3\2\2\2\u0121")
        buf.write("\u0122\7t\2\2\u0122\u0123\7g\2\2\u0123\u0124\7r\2\2\u0124")
        buf.write("\u0125\7g\2\2\u0125\u0126\7c\2\2\u0126\u0127\7v\2\2\u0127")
        buf.write("Z\3\2\2\2\u0128\u0129\7h\2\2\u0129\u012a\7q\2\2\u012a")
        buf.write("\u012b\7t\2\2\u012b\\\3\2\2\2\u012c\u012d\7p\2\2\u012d")
        buf.write("\u012e\7g\2\2\u012e\u012f\7z\2\2\u012f\u0130\7v\2\2\u0130")
        buf.write("^\3\2\2\2\u0131\u0132\7d\2\2\u0132\u0133\7t\2\2\u0133")
        buf.write("\u0134\7g\2\2\u0134\u0135\7c\2\2\u0135\u0136\7m\2\2\u0136")
        buf.write("`\3\2\2\2\u0137\u0138\7c\2\2\u0138\u0139\7p\2\2\u0139")
        buf.write("\u013a\7f\2\2\u013ab\3\2\2\2\u013b\u013c\7q\2\2\u013c")
        buf.write("\u013d\7t\2\2\u013dd\3\2\2\2\u013e\u013f\7p\2\2\u013f")
        buf.write("\u0140\7q\2\2\u0140\u0141\7v\2\2\u0141f\3\2\2\2\u0142")
        buf.write("\u0143\7v\2\2\u0143\u0144\7t\2\2\u0144\u0145\7w\2\2\u0145")
        buf.write("\u014c\7g\2\2\u0146\u0147\7h\2\2\u0147\u0148\7c\2\2\u0148")
        buf.write("\u0149\7n\2\2\u0149\u014a\7u\2\2\u014a\u014c\7g\2\2\u014b")
        buf.write("\u0142\3\2\2\2\u014b\u0146\3\2\2\2\u014ch\3\2\2\2\u014d")
        buf.write("\u014e\7d\2\2\u014e\u014f\7q\2\2\u014f\u0150\7q\2\2\u0150")
        buf.write("\u0155\7n\2\2\u0151\u0152\7p\2\2\u0152\u0153\7w\2\2\u0153")
        buf.write("\u0155\7o\2\2\u0154\u014d\3\2\2\2\u0154\u0151\3\2\2\2")
        buf.write("\u0155j\3\2\2\2\u0156\u015a\t\4\2\2\u0157\u0159\t\5\2")
        buf.write("\2\u0158\u0157\3\2\2\2\u0159\u015c\3\2\2\2\u015a\u0158")
        buf.write("\3\2\2\2\u015a\u015b\3\2\2\2\u015bl\3\2\2\2\u015c\u015a")
        buf.write("\3\2\2\2\f\2\u00c4\u00cc\u00d6\u00dc\u0107\u0113\u014b")
        buf.write("\u0154\u015a\3\b\2\2")
        return buf.getvalue()


class BCCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    WS = 31
    COMMENT = 32
    FID = 33
    TK_NUM = 34
    PRINT = 35
    INPUT = 36
    WHEN = 37
    IF = 38
    ELSE = 39
    CICLE = 40
    CICLE2 = 41
    RETURN = 42
    LOOP = 43
    REPEAT = 44
    FOR = 45
    NEXT = 46
    BREAK = 47
    AND = 48
    OR = 49
    NOT = 50
    TK_BOOL = 51
    DATATYPE = 52
    ID = 53

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'function'", "':'", "'('", "','", "')'", "'end'", "'var'", 
            "';'", "'{'", "'}'", "'--'", "'++'", "'do'", "':='", "'+='", 
            "'-='", "'*='", "'/='", "'%='", "'<'", "'=='", "'<='", "'>'", 
            "'>='", "'!='", "'+'", "'-'", "'*'", "'/'", "'%'", "'print'", 
            "'input'", "'when'", "'if'", "'else'", "'return'", "'loop'", 
            "'repeat'", "'for'", "'next'", "'break'", "'and'", "'or'", "'not'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "COMMENT", "FID", "TK_NUM", "PRINT", "INPUT", "WHEN", 
            "IF", "ELSE", "CICLE", "CICLE2", "RETURN", "LOOP", "REPEAT", 
            "FOR", "NEXT", "BREAK", "AND", "OR", "NOT", "TK_BOOL", "DATATYPE", 
            "ID" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "WS", "COMMENT", "FID", 
                  "TK_NUM", "PRINT", "INPUT", "WHEN", "IF", "ELSE", "CICLE", 
                  "CICLE2", "RETURN", "LOOP", "REPEAT", "FOR", "NEXT", "BREAK", 
                  "AND", "OR", "NOT", "TK_BOOL", "DATATYPE", "ID" ]

    grammarFileName = "BCC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


